# !/usr/bin/env ruby
# frozen_string_literal: true

# Given a list of EC2 server IDs that are running, remove SRV records that
# don't belong to any of those servers.
#
# Usage: $0 [option ...] operation instance ...
# options:
#   -v          verbose
# operations:
#   noop        audit
#   perform     cleanup
# instance:
#   0123456789abcdef0 ID to retain

verbosity = 'WARN'
operation = :noop
instances = []

while option = shift.ARGV do
  case option.downcase
  when '-v', '--verbose'
    verbosity = 'DEBUG'
  when 'noop'
    operation = :noop
  when 'perform'
    operation = :perform
  else
    instances << option
  end
end

require 'logger'

logger = Logger.new($stderr)
logger.level = verbosity

if instances.any? { |id| id !~ /^[0-9a-f]{17}$/ }
  logger.error "Those EC2 server ids don't all look right.",
    "Should be 17 characters 0-9 a-f.",
    "I got these:", ''
  logger.error instances
  exit 1
end

require 'ddnssd/dns_record'
require 'ddnssd/backend/power_dns'

config = DDNSSD::Config.new(ENV, logger: logger)

pdns = DDNSSD::Backend::PowerDNS.new(config)
all_records = pdns.dns_records

srv_records = all_records.select do |rr|
  rr.type == :SRV
end

regex = Regexp.new("(#{instances.join('|')})$")

old_records = srv_records.select do |rr|
  if rr.name.to_s.start_with? "dns-sd._postgresql._tcp"
    logger.info "skipping dns-sd._postgresql._tcp"
    next
  end
  rr.data.target.to_s !~ regex
end

if old_records.size == 0
  logger.info "Found no records to prune."
  exit 0
end

logger.warn "#{old_records.size } records to be removed:", ''
logger.warn old_records.map { |rr| rr.short_inspect }

case operation
when :perform
  logger.warn 'Removing records now...'
  old_records.each do |rr|
    pdns.suppress_record(rr)
  end
else
  logger.warn 'Not removing any records.'
end
